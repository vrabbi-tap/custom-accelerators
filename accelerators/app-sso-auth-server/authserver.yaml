#@ load("@ytt:data", "data")
---
apiVersion: sso.apps.tanzu.vmware.com/v1alpha1
kind: AuthServer
metadata:
  name: #@ data.values.artifactId
  namespace: #@ data.values.namespace
  labels:
    name: #@ data.values.artifactId
  annotations:
    sso.apps.tanzu.vmware.com/allow-client-namespaces: #@ ",".join(data.values.allowedNamespaces)
    #@ if data.values.allowHttpIssuer:
    sso.apps.tanzu.vmware.com/allow-unsafe-issuer-uri: ""
    #@ end
    #@ if data.values.internalIdp:
    sso.apps.tanzu.vmware.com/allow-unsafe-identity-provider: ""
    #@ end
spec:
  replicas: 1
  tls:
    #@ if data.values.allowHttpIssuer:
    disabled: true
    #@ else if data.values.tlsSourceType == "CertManager":
    issuerRef:
      kind: #@data.values.issuerType
      name: #@ data.values.issuerName
    #@ else if data.values.tlsSourceType == "SecretRef":
    secretRef:
      name: #@ data.values.secretName
    #@ else
    certificateRef:
      name: #@ data.values.certName
    #@ end
  #@ end
  tokenSignature:
    signAndVerifyKeyRef:
      name: #@ "{}-signing-key".format(data.values.artifactId)
  identityProviders:
    #@ if data.values.internalIdp:
    - name: "internal"
      internalUnsafe:
        users:
          - username: "user"
            password: "$2a$10$201z9o/tHlocFsHFTo0plukh03ApBYe4dRiXcqeyRQH6CNNtS8jWK"
    #@ end
    #@ if data.values.ldapIdp:
    - name: ldap
      ldap:
        server:
          scheme: #@ data.values.ldapScheme
          host: #@ data.values.ldapHost
          port: #@ data.values.ldapPort
          base: #@ data.values.ldapBaseDn
        bind:
          dn: #@ data.values.bindDn
          passwordRef:
            name: ldap-password
        user:
          searchFilter: #@ data.values.userSearchFilterAttribute + "={0}"
          searchBase: #@ data.values.userSearchBaseDn
        group:
          searchFilter: #@ data.values.groupSearchFilterAttribute + "={0}"
          searchBase: #@ data.values.groupSearchBaseDn
          searchSubTree: #@ data.values.groupSearchSubTree
          searchDepth: #@ data.values.groupSearchDepth
          roleAttribute: #@ data.values.groupRoleAttr
    #@ end
    #@ if data.values.oidcIdp:
    - name: oidc
      openID:
        #@ if data.values.autoConfigureOidcViaIssuerUri == "yes":
        issuerURI: #@ data.values.issuerUri
        #@ else:
        authorizationUri: #@ data.values.authorizationUri
        tokenUri: #@ data.values.tokenUri
        jwksUri: #@ data.values.jwksUri
        #@ end
        clientID: #@ data.values.clientId
        clientSecretRef:
          name: #@ "{}-oidc-client-secret".format(data.values.artifactId)
        scopes: #@ data.values.scopes
        #@ if data.values.rolesClaimMapping:
        claimMappings:
          roles: #@ data.values.rolesClaimMapping
        #@ end
    #@ end
    #@ if data.values.samlIdp:
    - name: my-saml-provider
      saml:
        metadataURI: #@ data.values.metadataUri
        #@ if data.values.configureClaimMappings:
        claimMappings:
          #@ if data.values.rolesClaimMapping:
          roles: #@ data.values.rolesClaimMapping
          #@ end
          #@ if data.values.givenNameClaimMapping:
          givenName: #@ data.values.givenNameClaimMapping
          #@ end
          #@ if data.values.familyNameClaimMapping:
          familyName: #@ data.values.familyNameClaimMapping
          #@ end
          #@ if data.values.emailClaimMapping:
          emailAddress: #@ data.values.emailClaimMapping
          #@ end
        #@ end
    #@ end
#@ if data.values.ldapIdp:
---
apiVersion: v1
kind: Secret
metadata:
  name: ldap-password
  namespace: #@ data.values.namespace
stringData:
  password: #@ data.values.bindUserPassword
#@ end
#@ if data.values.oidcIdp:
---
apiVersion: v1
kind: Secret
metadata:
  name: #@ "{}-oidc-client-secret".format(data.values.artifactId)
  namespace: #@ data.values.namespace
stringData:
  clientSecret: #@ data.values.clientSecret
#@ end
---
apiVersion: secretgen.k14s.io/v1alpha1
kind: RSAKey
metadata:
  name: #@ "{}-signing-key".format(data.values.artifactId)
  namespace: #@ data.values.namespace
spec:
  secretTemplate:
    type: Opaque
    stringData:
      key.pem: $(privateKey)
      pub.pem: $(publicKey)
